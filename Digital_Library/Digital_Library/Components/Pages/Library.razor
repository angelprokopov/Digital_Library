@page "/library"
@using Digital_Library.Services
@using SharedModels
@inject BookService BookService

<h1 class="text-light text-center align-content-center">Saved books</h1>

<input class="form-control" type="text" placeholder="" @bind="searchQuery" />
<button class="btn btn-primary" @onclick="SearchBooks">Search</button>

@if(books == null || !books.Any()){
    <p class="text-light">No books are found</p>
} else {
    <div class="container">
        <div class="row">
            @foreach(var book in books)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-auto shadow-sm">
                        <img src="@book.CoverUrl" class="card-img-top img-fluid" alt="@book.Title" style="object-fit:cover;"/>
                        <div class="card-body">
                            <h4 class="card-title">@book.Title</h4>
                            <p class="card-text">
                                <strong>Author: </strong> @book.Author <br />
                                <strong>Genre: </strong> @book.Genre <br />
                                <strong>ISBN: </strong> @book.ISBN
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Book> books = new List<Book>();
    private string searchQuery = "";

    protected override async Task OnInitializedAsync() {
        try
        {
            books = await BookService.GetBooksAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load books: {ex.Message}");
            books = new List<Book>();
        }
    }


    private async Task SearchBooks() {
        if(!string.IsNullOrEmpty(searchQuery)){
            Console.WriteLine("Search query is empty");
            books = new List<Book>();
            return;
        }

        try
        {
            Console.WriteLine($"Searching for books with title: {searchQuery}");
            books = await BookService.SearchBookByTitleAsync(searchQuery);

            if(books==null || !books.Any()){
                Console.WriteLine("No books are found");
            } else {
                Console.WriteLine($"Books retrieved: {books.Count}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred while searching for books: {ex.Message}");
        }
    }
}
